@using MoeKinoWebApp.Models
@model Dictionary<int, MovieCarouselViewModel>


@{
    Layout = "_Layout";
}

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<div class="d-flex justify-content-center mb-4">
        <a data-i18n="movies-as-list" asp-controller="MovieList" asp-action="MovieList" class="btn btn-primary" style="width:250px">
            Show Movies as List
        </a>
</div>


<div class="container mt-4">
    <div class="row">
        @foreach (var genre in Model)
        {   
            var genreId = genre.Key;
            var genreData = genre.Value;
            <div class="col-md-12">
                <div id="carousel-@genreId" class="carousel slide" data-ride="carousel">
                    <h3>@genreData.GenreName</h3>
                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <div class="carousel-content">
                                @for (int i = 0; i < genreData.Movies.Count; i++)
                                {
                                    var movie = genreData.Movies[i];
                                    <div class="carousel-item-content">
                                        @if (!string.IsNullOrEmpty(movie.Poster))
                                        {
                                            <img class="d-block w-100" src="data:image/jpeg;base64,@movie.Poster" alt="@movie.Title">
                                        }
                                        else
                                        {
                                            <div class="d-block w-100 bg-dark text-white text-center p-5" data-i18n="no-poster">No Poster</div>
                                        }
                                        <div class="movie-title">
                                            <a asp-area="Main" asp-controller="MovieList" asp-action="MovieDetails" asp-route-id="@movie.Id">
                                                <h5>@movie.Title</h5>
                                            </a>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <a class="carousel-control-prev" href="#carousel-@genreId" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only" data-i18n="previous">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carousel-@genreId" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only" data-i18n="next" >Next</span>
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<style>
        .carousel-inner {
            display: flex;
            overflow: hidden;
        }

        .carousel-content {
            display: flex;
            flex-wrap: nowrap;
            transition: transform 0.5s ease;
        }

        .carousel-item-content {
            flex: 0 0 auto;
            width: 200px; 
            margin-right: 15px; 
            text-align: center; 
        }

        .carousel-item-content img {
            width: 100%; 
            height: 360px; 
        }

        .movie-title {
            margin-top: 10px; 
        }

        .carousel-control-prev, .carousel-control-next {
            width: 5%; 
            color: black; 
        }
    </style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');

    carousels.forEach(carousel => {
        const prevButton = carousel.querySelector('.carousel-control-prev');
        const nextButton = carousel.querySelector('.carousel-control-next');
        const content = carousel.querySelector('.carousel-content');
        const items = content.children.length;
        const itemWidth = content.querySelector('.carousel-item-content').offsetWidth;
        const visibleItems = Math.floor(carousel.offsetWidth / itemWidth);
        let index = 0;

        nextButton.addEventListener('click', () => {
            if (index < items - visibleItems) {
                index++;
                content.style.transform = `translateX(-${index * itemWidth}px)`;
            }
        });

        prevButton.addEventListener('click', () => {
            if (index > 0) {
                index--;
                content.style.transform = `translateX(-${index * itemWidth}px)`;
            }
        });
    });
});
</script>

